'''
scope 表示变量生效的区域
在python中存在两种作用域:全局作用域 和 函数作用域
    全局作用域:
        -在程序执行时创建，在程序结束后销毁
        -所有函数以外的区域都是全局作用域
        -在全局作用域中定义的变量都叫全局变量
        -全局变量可以在程序的任意位置被访问
    函数作用域:
        -函数作用域在函数调用时创建，在调用结束时销毁
        -函数每调用一次就会产生一个新的函数作用域
        -在函数作用域中定义的变量只能在函数内部访问
    变量的查找
        -当我们使用一个变量时，我们会优先在当前作用域中寻查该
        变量，如果有则使用，如果没有去上一级作用域中寻找,如果找到最后一层作用域
        都没有找到，则会抛出未定义异常
    变量的更改
        -在函数中为变量赋值时，默认都是为局部变量赋值.
        -如果希望在函数内部修改全局变量，则需要使用global关键字


'''
# a=0
# def fun0():
#     a=10
#     print(a)
#     def fun1():
#         global a
#         a=20
#         print(a)
#     fun1()
# fun0()
# print(a)

'''
namespace 命名空间
-命名空间指的是变量的存储位置，每一个变量都需要存储到指定的命名空间当中
-每一个作用域都会有一个对应的命名空间
-全局命名空间用来保存全局变量，函数命名空间用来保存函数中的变量
-命名空间实际上就是一个专门存储变量的字典
'''

#locals()用来获取当前作用域的命名空间,返回的是一个字典
a=10
scope=locals()
print(type(scope))
print(scope['a'])
#向字典中添加item相当于在全局中创建了一个变量
# scope['b']=20
# print(b)

def fun0():
    #在函数内部调用locals，会获取函数作用域的命名空间
    # a=10
    #scope=locals()
    #scope['b']=20
    # print(scope)
    # print(b)

    #globals获取的是全局命名空间也可以通过这种方式来修改全局变量
    global_scope=globals()
    print(global_scope)
    print('a=',global_scope['a'],'b=',global_scope['b'],sep='')

fun0()
